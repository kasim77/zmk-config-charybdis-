#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 5>;
            timeout-ms = <50>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <14 13>;
            timeout-ms = <50>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <15 16>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 16>;
            timeout-ms = <50>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <5 15>;
            timeout-ms = <50>;
        };

        ToNumpad {
            bindings = <&to 6>;
            key-positions = <24 14>;
        };

        Tomouse {
            bindings = <&to 5>;
            key-positions = <8 9>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <135>;
            quick-tap-ms = <0>;
        };
    };

    macros {
        macro1: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &kp ENTER>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp Q         &kp W          &kp E         &kp R           &kp T      &kp Y  &kp U  &kp I         &kp O      &kp P
&kp A         &kp S          &kp D         &ltq 3 F        &kp G      &kp H  &kp J  &kp K         &kp L      &kp SEMI
&kp Z         &kp X          &kp C         &kp V           &kp B      &kp N  &kp M  &kp COMMA     &kp DOT    &kp FSLH
&kp LEFT_ALT  &kp BACKSPACE  &ltq 1 SPACE  &kp LEFT_SHIFT  &lt 4 TAB                &ltq 2 SPACE  &kp ENTER  &kp LEFT_SHIFT
            >;
        };

        L1 {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6    &kp N7             &kp N8     &kp N9  &kp N0
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS          &kp EQUAL  &trans  &kp SQT
&trans  &trans  &trans  &trans  &trans  &kp LBKT  &kp RIGHT_BRACKET  &trans     &trans  &kp DEL
&trans  &trans  &trans  &trans  &trans                               &trans     &trans  &trans
            >;

            label = "num";
        };

        L2 {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)         &kp LS(AMPS)   &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)
&trans        &trans      &trans         &trans        &trans         &trans                &kp LS(MINUS)  &kp LS(EQUAL)  &trans        &kp LS(SQT)
&trans        &trans      &trans         &trans        &trans         &kp LS(LEFT_BRACKET)  &kp LS(RBKT)   &trans         &trans        &kp DELETE
&trans        &trans      &trans         &trans        &trans                                              &trans         &trans        &trans
            >;
        };

        func {
            bindings = <
&kp RA(Q)      &kp LA(W)  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans
&kp RC(RA(A))  &trans     &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans         &trans     &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans
&trans         &trans     &trans  &trans  &trans                      &trans  &trans     &trans
            >;
        };

        Shortcut {
            label = "shortcut";
            bindings = <
&none   &none       &kp C_VOL_UP  &none       &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none   &kp C_PREV  &kp C_PP      &kp C_NEXT  &none   &bt BT_CLR    &none         &none         &none         &none
&none   &none       &kp C_VOL_DN  &trans      &none   &none         &none         &none         &none         &none
&trans  &trans      &trans        &trans      &trans                              &trans        &trans        &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &none   &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &mkp MCLK  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                        &trans  &trans  &to 0
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &to 0
            >;
        };
    };
};
